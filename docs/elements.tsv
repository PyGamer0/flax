GLYPH	TYPE	DESCRIPTION	LONG DESCRIPTION
!	1	factorial	factorial, vectorising
""""	S	string delimiter	syntactic sugar for a string which is actually a list of numbers
"#"	1	length	length of a list
$	1	sublists	sublists of a list
%	2	modulo	modulo, vectorising
&	2	bitwise and	bitwise and, vectorising
'	Q	map / zipwith	map a function over a list or zip 2 lists and perform a dyadic operation on each pair
(	1	prefixes	prefixes of a list
)	1	suffixes	suffixes of a list
*	2	power	raise one number of the power of another, vectorising
+	2	add	addition, vectorising
,	2	catanate	catanate a number or a list to a list
-	2	subtract	subtraction, vectorising
.	S	decimal point	literal decimal point
/	2	repeat	repeat a value in a list a number of times
0	S	zero	literal zero
1	S	one	literal one
2	S	two	literal two
3	S	three	literal three
4	S	four	literal four
5	S	five	literal five
6	S	six	literal six
7	S	seven	literal seven
8	S	eight	literal eight
9	S	nine	literal nine
:*	2	matrix power	matrix power
:<	2	bitshift left	bitshift left, vectorising
:>	2	bitshift right	bitshift right, vectorising
:j	2	to complex	convert 2 numbers to a complex number, vectorising
:Ȧ	2	atan2	atan2, vectorising
:•	2	matrix multiplication	matrix multiplication
;$	1	sublists of permutations	sublists of permutations
;1	1	ones	build a square matrix with 1s at locations specified
;A	1	arccos	arccosine, vectorising
;B	1	bounce	append the reverse of a list of itself
;C	1	cos	cosine, vectorising
;D	1	determinant	determinant
;F	1	factors	prime factors, vectorising
;G	1	graph adjacency matrix	graph adjacency matrix
;I	1	identity matrix	identity matrix of given size
;J	1	split complex	split a complex number into its constituents
;L	1	natural log	natural log, vectorising
;M	1	mean	arithmetic mean
;P	1	polyroots	roots of a polynomial
;R	1	range from 2..n	range from 2 to n (exclusive), vectorising
;S	1	sin	sine, vectorising
;T	1	tan	tangent, vectorising
;b	1	braille	convert a boolean matrix to braille
;c	1	cosh	hyperbolic cosine, vectorising
;f	1	nth fibonacci	nth fibonacci number, vectorising
;l	1	nth lucas	nth lucas number, vectorising
;r	1	range from 0...n	range from 0 to n (inclusive), vectorising
;s	1	sinh	hyperbolic sine, vectorising
;t	1	tanh	hyperbolic tangent, vectorising
;°	1	deg2rad	degrees to radians, vectorising
;²	1	is perfect square	is perfect square, vectorising
;Ċ	1	sec	secant, vectorising
;ċ	1	nth catalan	nth catalan number, vectorising
;Ġ	1	graph distance matrix	graph distance matrix of a directed graph
;Ȧ	1	arctan	arctangent, vectorising
;Ḃ	1	bounce at depth 1	bounce, vectorising at depth one
;Ṗ	1	primes	generate said amount of primes, vectorising
;Ṡ	1	csc	cosecant, vectorising
;Ṫ	1	cot	cotangent, vectorising
;Ạ	1	arcsin	arcsine, vectorising
;√	1	int sqrt	integer square root, vectorising
<	2	less	lesser than, vectorising
=	2	equal	equal to, vectorising
>	2	more	greater than, vectorising
?	1	rand floats	generate given amount of random floats between 0 and 1
A	1	abs	absolute value, vectorising
B	1	to bin	to binary, vectorising
C	1	1-x	complement, vectorising
D	1	to digits	to digits, vectorising
E	1	all equal	are all equal
F	1	flatten	flatten
G	1	group indicies	group equal elements by their indicies
H	1	head	head, modifies the list
I	1	increments	forward differences
J	1	ranged length	range of length
K	1	cumsum	cumulative sum
L	1	last	last, modifies the list
M	1	square	square, vectorising
N	1	neck	neck
O	1	identity	identity
P	1	permutations	permutations
Q	1	half	half, vectorising
R	1	reverse depth 1	reverse vectorising on depth one
S	1	sort	sort
T	1	tail	tail
U	1	unique	unique
V	1	prime?	is prime, vectorising
W	1	where	copies of sequential indices of elements
X	1	split into 2	split into equal parts if possible
Y	1	even indices elements	elements at even indicies
Z	1	transpose	transpose
[	S	start a list	start a list
\	1	unrepeat	lengths of runs of equal values
]	S	end a list	end a list
^	2	bitwise xor	bitwise xor, vectorising
_(	0	""()""	parenthesis
_+	0	[1,¯1]	signs
_-	0	[¯1,1]	signs, the other way
_/	0	""/\\""	slashes
_0	0	[0,0]	zeros
_1	0	[1,1]	ones
_2	0	[2,2]	twos
_<	0	""<>""	angle brackets
_A	0	"ABCDEFGHIJKLMNOPQRSTUVWXYZ"	capital letters
_D	0	[[0,1],[1,0],[0,¯1],[¯1,0]]	directions
_H	0	"Hello, World!"	hello world!
_P	0	phi	phi
_R	0	printable ascii	printable ascii
_S	0	ඞ	A M O G U S
_V	0	""AEIOU""	vowels
_W	0	""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_""	identifier
_Y	0	""AEIOUY""	vowels with y
_[	0	""[]""	square brackets
