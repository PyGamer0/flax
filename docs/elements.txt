!  1 factorial
"  S string delimeter
#  1 length
ø  T start a niladic chain
µ  T start a monadic chain
г  T map the monadic chain
ð  T start a dyadic chain
ɓ  T start a dyadic chain with arguments reversed
$  1 sublists
%  2 moduluo
&  2 bitwise and
'  Q map / zipwith
(  1 prefixes
)  1 suffixes
*  2 power
+  2 add
,  2 append
-  2 sub
.  S decimal point
/  2 repeat
0  S zero
1  S one
2  S two
3  S three
4  S four
5  S five
6  S six
7  S seven
8  S eight
9  S nine
:* 2 matrix power
:< 2 bitshift left
:> 2 bitshift right
:j 2 to complex
:Ȧ 2 atan2
:• 2 matrix multiplication
;$ 1 sublists of permutations
;1 1 build a matrix with 1s at indicies
;A 1 arccos
;B 1 bounce
;C 1 cos
;D 1 determinant
;F 1 prime factors
;G 1 graph adjacency matrix
;I 1 identity matrix
;J 1 split complex
;L 1 natural log
;M 1 mean
;P 1 polyroots
;R 1 range from 2.. n
;S 1 sin
;T 1 tan
;b 1 boolean matrix to braille
;c 1 cosh
;f 1 nth fibonacci number
;l 1 nth lucas number
;r 1 range from 0...n
;s 1 sinh
;t 1 tanh
;° 1 degrees to radians
;² 1 is perfect square
;Ċ 1 sec
;ċ 1 nth catalan number
;Ġ 1 graph distance matrix
;Ȧ 1 arctan
;Ḃ 1 bounce depth 1
;Ṗ 1 primes
;Ṡ 1 csc
;Ṫ 1 cot
;Ạ 1 arcsin
;√ 1 integer square root
<  2 less
=  2 equal
>  2 more
?  1 random floats
A  1 absolute value
B  1 to binary
C  1 complement
D  1 to digits
E  1 all equal
F  1 flatten
G  1 group equal elements by indicies
H  1 head popping
I  1 increments
J  1 range of length
K  1 cumulative sum
L  1 last popping
M  1 square
N  1 neck
O  1 identity
P  1 permutations
Q  1 half
R  1 reverse on depth 1
S  1 sort
T  1 tail
U  1 unique
V  1 is prime
W  1 where
X  1 split into 2
Y  1 elements at even indicies
Z  1 transpose
[  S start list
\  1 unrepeat
]  S end list
^  2 bitwise xor
_( 0 "()"
_+ 0 [1,-1]
_- 0 [-1,1]
_/ 0 "/\\"
_0 0 [0,0]
_1 0 [1,1]
_2 0 [2,2]
_< 0 "<>"
_A 0 "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
_D 0 [[0,1],[1,0],[0,-1],[-1,0]]
_H 0 "Hello, World!"
_P 0 phi
_R 0 printable ascii
_S 0 ඞ
_V 0 "AEIOU"
_W 0 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"
_Y 0 "AEIOUY"
_[ 0 "[]"
_a 0 "abcdefghijklmnopqrstuvwxyz"
_d 0 [[1,1],[1,0],[1,-1],[0,1],[0,0],[0,-1],[-1,1],[-1,0],[-1,-1]]
_e 0 e
_h 0 "hello world"
_p 0 pi
_v 0 "aeiou"
_x 0 "0123456789abcdef"
_y 0 "aeiouy"
_{ 0 "{}"
_Ạ 0 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
_₀ 0 128
_₁ 0 256
_₂ 0 512
_₃ 0 1024
_₄ 0 2048
_₅ 0 4096
_₆ 0 8192
_₇ 0 4294967296
_∞ 0 infinity
`  Q scanl1
a  2 and
b  2 to base
c  2 binomial coefficient
d  2 divmod
e  2 join each of one to other
f  2 filter drop
g  2 gcd
h  2 head
i  2 index into
j  S complex number delimeter
l  2 lcm
m  2 min
n  2 floor div
o  2 split at occurence
p  2 pick
q  2 quit
r  2 range inclusive
s  2 split into chunks
t  2 tail
u  2 find for each
v  2 or
w  2 windows
x  2 max
y  2 join
z  2 zip
{  1 decrement
|  2 bitwise or
}  1 increment
~  1 bitwise not
¨  Q quick map
¬  1 not
¯  S negative number
°  Q apply at
±  1 sign
²  Q previous chain as dyad
³  Q next chain as nilad
´  Q foldl1
¹  Q previous chain as monad
Ç  1 split into chunks of length 2
Ð  1 double
×  2 mul
÷  2 divide
Ă  1 any and all
Ċ  1 choose random
ċ  2 count occerence
Ġ  1 group adjacent equal
Ń  1 split on newlines
Ň  1 join on newlines
Ś  1 split on spaces
Š  1 join on spaces
Ż  1 prepend zero
ż  2 transpose with filler
Ȧ  1 any
ʲ  Q scan fixedpoint
ˀ  Q ternary if
˘  Q self args / monad as dyad using left
˙  Q 2 links as nilad
˜  Q swap args / monad as dyad using right
˝  Q foldl
ˢ  Q sort
Π  1 product
Σ  1 sum
φ  1 flatten 1 depth
ᐣ  Q n-compose
ᴰ  Q 2 links as dyad
ᴹ  Q 2 links as monad
ᴺ  Q all neighbours
ᵀ  Q truthy indices after applying
ᵂ  Q while
ᵈ  Q 3 links as dyad
ᵍ  Q filter drop
ᵐ  Q 3 links as monad
ᵔ  Q apply to neighbours
ᵖ  Q Map over prefixes
ᵗ  Q apply transpose apply again
ᵝ  Q call self
ᵟ` Q scanr1
ᵟ´ Q foldr1
ᵟ˝ Q foldr
ᵟᵂ Q cumulative while
ᵟᵍ Q filter drop of permutations
ᵟᶠ Q filter keep of permutations
ᵟ‶ Q scanr
ᵟⁿ Q cumulative repeat n times
ᵠ  Q 4 links as dyad
ᶠ  Q filter keep
ᶲ  Q 4 links as monad
Ḃ  1 from binary
ḃ  2 from base
Ḅ  1 bit
Ḋ  1 from digits
Ḍ  1 divisors
ḍ  2 is divisible
Ḟ  1 indices of falsey
ḟ  2 filter keep
Ḳ  1 sum depth 1
ḷ  2 find all
Ṅ  1 negate
Ṗ  1 print
Ṙ  1 reverse
ṙ  2 range exclusive
Ṛ  1 reciprocal
Ṡ  1 reverse sort
Ṫ  1 indicies of truthy
Ẏ  1 elements at odd indicies
Ẓ  1 zip with filler 0
Ạ  1 all
ị  2 find
Ọ  1 reverse every other
ọ  2 order
‘  Q each right
’  Q each left
•  2 cartesian product
‶  Q scanl
⁰  Q previous chain as nilad
ⁱ  Q fold fixedpoint
⁴  Q next chain as monad
⁵  Q next chain as dyad
⁶  Q chain at
⁷  Q set register
⁺  Q max
⁻  Q min
⁼  Q is equal after applying
ⁿ  Q repeat n times
₀  0 100 / 1st arg
₁  0 [0,1] / 2nd arg
₂  0 10 / 3rd arg
₃  0 16 / 4th arg
₄  0 32 / 5th arg
₅  0 64 / 6th arg
₆  0 26 / 7th arg
₇  0 get register
₈  0 read a character
₉  0 read a line
₊  S next 2 as string
₋  S next as string
₍  0 chains left argument
₎  0 chains right argument
∆  1 maximum
∇  1 minimum
∊  2 in
√  1 square root
≠  2 not equal
≡  2 strictly equal
≢  2 strictly not equal
≤  2 less or equal
≥  2 more or equal
⊂  1 enclose
⊆  1 enclose if not
⊏  2 everyth element
⊢  2 right
⊣  2 left
⋈  2 pair
⌈  1 ceil
⌊  1 floor
⌜  Q outer product
⌽  2 rotate
⍋  1 grade up
⍒  1 grade down
⍝  S comment
⍪  2 prepend
⍳  1 iota
⍴  2 reshape
⍸  1 range from 1...n
